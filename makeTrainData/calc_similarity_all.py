#!/usr/bin/python3
import numpy as np
import os
os.environ["http_proxy"] = "http://proxy.cc.seikei.ac.jp:8080"
os.environ["https_proxy"] = "http://proxy.cc.seikei.ac.jp:8080"
#os.environ["CUDA_VISIBLE_DEVICES"]="-1"

import sys
from sentence_transformers import SentenceTransformer

import MeCab
mecab=MeCab.Tagger('')

import re



sentlist0=["発行する株式、処分する自己株式、発行する新株予約権、処分する自己新株予約権を引き受ける者の募集又は株式、新株予約権の売出し", "発行登録及び需要状況調査の開始", "資本金の額の減少", "資本準備金又は利益準備金の額の減少", "自己株式の取得", "株式無償割当て又は新株予約権無償割当て", "株式無償割当て又は新株予約権無償割当て", "株式の分割又は併合", "剰余金の配当", "合併等の組織再編行為", "公開買付け又は自己株式の公開買付け", "公開買付け等に関する意見表明等", "事業の全部又は一部の譲渡又は譲受け", "解散（合併による解散を除く。）", "新製品又は新技術の企業化", "業務上の提携又は業務上の提携の解消", "子会社等の異動を伴う株式又は持分の譲渡又は取得その他の子会社等の異動を伴う事項", "固定資産の譲渡又は取得、リースによる固定資産の賃貸借", "事業の全部又は一部の休止又は廃止", "上場廃止申請", "破産手続開始、再生手続開始又は更生手続開始の申立て", "新たな事業の開始", "代表取締役又は代表執行役の異動", "人員削減等の合理化", "商号又は名称の変更", "単元株式数の変更又は単元株式数の定めの廃止若しくは新設", "決算期変更（事業年度の末日の変更）", "債務超過又は預金等の払戻の停止のおそれがある旨の内閣総理大臣への申出（預金保険法第74条第5項の規定による申出）", "特定調停法に基づく特定調停手続による調停の申立て", "上場債券等の繰上償還又は社債権者集会の招集その他上場債券等に関する権利に係る重要な事項", "公認会計士等の異動", "継続企業の前提に関する事項の注記", "有価証券報告書・四半期報告書の提出期限延長に関する承認申請書の提出", "株式事務代行機関への株式事務の委託の取止め", "開示すべき重要な不備、評価結果不表明の旨を記載する内部統制報告書の提出", "定款の変更", "全部取得条項付種類株式の全部の取得", "特別支配株主による株式等売渡請求に係る承認又は不承認", "上場会社の運営、業務若しくは財産又は当該上場株券等に関する重要な事項"]

sentlist1=["災害に起因する損害又は業務遂行の過程で生じた損害", "主要株主又は主要株主である筆頭株主の異動", "上場廃止の原因となる事実", "訴訟の提起又は判決等", "仮処分命令の申立て又は決定等", "免許の取消し、事業の停止その他これらに準ずる行政庁による法令等に基づく処分又は行政庁による法令違反に係る告発", "親会社の異動、支配株主（親会社を除く。）の異動又はその他の関係会社の異動", "破産手続開始、再生手続開始、更生手続開始又は企業担保権の実行の申立て", "手形等の不渡り又は手形交換所による取引停止処分", "親会社等に係る破産手続開始、再生手続開始、更生手続開始又は企業担保権の実行の申立て", "債権の取立不能又は取立遅延", "取引先との取引停止", "債務免除等の金融支援", "資源の発見", "特別支配株主による株式等売渡請求等", "株式又は新株予約権の発行差止請求", "株主総会の招集請求", "保有有価証券の含み損", "社債に係る期限の利益の喪失", "上場債券等の社債権者集会の招集その他上場債券等に関する権利に係る重要な事実", "公認会計士等の異動", "有価証券報告書・四半期報告書の提出遅延", "有価証券報告書・四半期報告書の提出期限延長申請に係る承認等", "財務諸表等の監査報告書における不適正意見、意見不表明、継続企業の前提に関する事項を除外事項とした限定付適正意見", "内部統制監査報告書における不適正意見、意見不表明", "株式事務代行委託契約の解除通知の受領等", "上場会社の運営、業務若しくは財産又は当該上場株券等に関する重要な事実"]

sentlist2=["決算短信", "四半期決算短信"]

sentlist3=["業績予想の修正、予想値と決算値の差異等", "配当予想、配当予想の修正"]

sentlist4=["投資単位の引下げに関する開示", "財務会計基準機構への加入状況等に関する開示", "MSCB等の転換又は行使の状況に関する開示", "支配株主等に関する事項の開示", "非上場の親会社等の決算情報", "事業計画及び成長可能性に関する事項の開示", "上場維持基準への適合に向けた計画の開示"]

sentlist5=["子会社等の合併等の組織再編行為", "子会社等による公開買付け又は自己株式の公開買付け", "子会社等の事業の全部又は一部の譲渡又は譲受け", "子会社等の解散（合併による解散を除く。）", "子会社等における新製品又は新技術の企業化", "子会社等における業務上の提携又は業務上の提携の解消", "子会社等における孫会社の異動を伴う株式又は持分の譲渡又は取得その他の孫会社の異動を伴う事項", "子会社等における固定資産の譲渡又は取得、リースによる固定資産の賃貸借", "子会社等の事業の全部又は一部の休止又は廃止", "子会社等の破産手続開始、再生手続開始又は更生手続開始の申立て", "子会社等における新たな事業の開始", "子会社等の商号又は名称の変更", "子会社等における債務超過又は預金等の払戻の停止のおそれがある旨の内閣総理大臣への申出（預金保険法第74条第5項の規定による申出）", "子会社等における特定調停法に基づく特定調停手続による調停の申立て", "子会社等の運営、業務又は財産に関する重要な事項"]

sentlist6=["子会社等における災害に起因する損害又は業務遂行の過程で生じた損害", "子会社等における訴訟の提起又は判決等", "子会社等における仮処分命令の申立て又は決定等", "子会社等における免許の取消し、事業の停止その他これらに準ずる行政庁による法令に基づく処分又は行政庁による法令違反に係る告発", "子会社等における破産手続開始、再生手続開始、更生手続開始又は企業担保権の実行の申立て", "子会社等における手形等の不渡り又は手形交換所による取引停止処分", "子会社等における孫会社に係る破産手続開始、再生手続開始、更生手続開始又は企業担保権の実行の申立て", "子会社等における債権の取立不能又は取立遅延", "子会社等における取引先との取引停止", "子会社等における債務免除等の金融支援", "子会社等における資源の発見", "子会社等の運営、業務又は財産に関する重要な事実"]

sentlist7=["子会社等の業績予想の修正、予想値と決算値の差異等"]



def main():
    sbert = SentenceTransformer('./model')

    sum=0

    file=open("label.list")
    for l in file:     #file単位のループ
        line=l.rstrip();

        tmp=line.split(',')
        if not tmp[1] : continue
        filename=tmp[0]

        tmp2=tmp[1].split(' ')
        label=tmp2[0]

        file2=open(f"txt2/{filename}")
        print(f"{filename} {label}", end="")

        flag=0


        for l2 in file2:    #文単位のループ

            line2=l2.rstrip();       #改行削除
            line2.replace('　', '')   #制御文字削除
            line2.replace('\a', '')
            line2.replace('\f', '')
            line2.replace('\r', '')
            line2.replace('\0', '')
            line2.replace('\v', '')
            line2.replace('\b', '')
            line2.replace('\t', '')
            line2.replace('\n', '')
            if not line2 : continue

            tmp3=line2.split(' ')
            if len(tmp3)!=2 : continue
            else : ln=tmp3[1]
            if not ln : continue

            #形態素解析
            mecab_results=mecab.parse(ln)
            results=mecab_results.split('\n')
            data=results[len(results)-3].split('\t')
            hinsi=data[1].split(',')
            #if (hinsi[0]!="助詞" and hinsi[0]!="助動詞") and data[0]!="お知らせ" : continue  #助詞・助動詞以外、お知らせを除く

            tmp4=tmp3[0].split(':')
            sid=tmp4[1]     #原文書の文ID

            if not re.search(r'[ぁ-ん]+|[ァ-ヴー]+|[一-龠]+', ln) : continue
            ln.replace(' ', '')

            #sentenceBERT
            sentences=[]
            sentences.append(ln)

            if label=='0':
                sentences.extend(sentlist0)
            if label=='1':
                sentences.extend(sentlist1)
            if label=='2':
                sentences.extend(sentlist2)
            if label=='3':
                sentences.extend(sentlist3)
            if label=='4':
                sentences.extend(sentlist4)
            if label=='5':
                sentences.extend(sentlist5)
            if label=='6':
                sentences.extend(sentlist6)
            if label=='7':
                sentences.extend(sentlist7)

            vectors = sbert.encode(sentences)
            for i in range(1, len(vectors)):
                sim = np.dot(vectors[0],vectors[i]) / (np.linalg.norm(vectors[0]) * np.linalg.norm(vectors[i]))
                if sim>=0.85:
                    print(f" {sid}", end="")
                    flag=1
                    break

        if flag==0 : sum+=1
        print()

    print(sum)


if __name__ == "__main__":
    main()
